/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.8";	
}

PARSER_BEGIN(Yaka)

import java.io.IOException;

public class Yaka {
	public static TabIdent tabIdent = new TabIdent();
	public static Expression expression = new Expression();
	public static Declaration declaration = new Declaration();
	public static Loop loop = new Loop();
	public static Condition condition = new Condition();
	public static int line = 1;
	public static YVM yvm;


  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input = System.in;
    char type = 'n';
    String outputName = "toto";
    String inputName = "";

    for(int i = 0; i <args.length;i++){
    	if(args[i].equals("-i")){
    		try {
		        input = new java.io.FileInputStream(args[i+1] + ".yaka");
				inputName = args[i+1];
		    	i++;
		    } catch (java.io.FileNotFoundException e) {
		        System.out.println("Fichier introuvable.");
		        return;
		    } catch (NullPointerException e){
		    	System.out.println("Veuillez spécifier un nom de fichier.");
		    	return;
		    }
		}
		else if(args[i].equals("-o")){
		    try{
				outputName = args[i+1];
		    	i++;
		    }catch (NullPointerException e){
		    	System.out.println("Veuillez spécifier un nom de fichier.");
		    	return;
		    }
		}
		else if(args[i].equals("-a"))
			type = 'a';
		else if(args[i].equals("-b"))
			type = 'b';
		else if(args[i].equals("-n"))
			type = 'n';
		else{
			System.out.println("Option inconnue : " + args[i] + ". Usage: java Gram [-a] [-b] [-o fichier] [-i fichier]");
			return;
  		}
  	}
 
  	if(input.equals(System.in))
      System.out.println("Lecture sur l'entree standard...");
	else
		System.out.println(inputName +": ");
	if(outputName.equals("toto") && !inputName.equals(""))
		outputName = inputName;
    try {
      	analyseur = new Yaka(input);
      	try{
		  	if(type == 'a') {
				Yaka.yvm = new YVMasm(outputName);
				YVMtoASM yvmToAsm = new YVMtoASM(outputName + ".yvm", (YVMasm)Yaka.yvm);
				yvmToAsm.toAsm();
			}
			else
				Yaka.yvm = new YVM(outputName);
		}
		catch (IOException e) {
				System.out.print("Impossible de créer le fichier "+outputName);
				if(type == 'a')
					System.out.println(".asm");
				else
					System.out.println(".yvm");
				return;
		}
    	analyseur.analyse();
  		if(type == 'b'){
  			try{
  				Yaka.yvm = new YVMasm(outputName);
  				YVMtoASM yvmToAsm = new YVMtoASM(outputName + ".yvm", (YVMasm)Yaka.yvm);
                yvmToAsm.toAsm();
  			}
  			catch (IOException e){
  				System.out.println("Impossible de créer le fichier "+outputName+".asm");
  				return;
  			}
  		}
  		System.out.println("analyse syntaxique réussie!");
   	    if(expression.typesEmpty())
   	  		System.out.println("analyse sémantique réussie!");
   	 	else
   	  		System.out.println("analyse sémantique ratée!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}
PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identRead;
 public static String stringRead;
 public static int intRead;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"{Yaka.line++;}
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEAN: "BOOLEEN" >
| < VAR: "VAR" >
| < DO: "FAIRE" >
| < ELSE: "SINON" >
| < FOR: "POUR" >
| < IF: "SI" >
| < FI: "FSI">
| < INT: "ENTIER" >
| < RETURN: "RETOURNE" >
| < TRUE: "VRAI" >
| < WHILE: "TANTQUE" >
| < CONST : "CONST">
| < FALSE : "FAUX">
| < DONE : "FAIT">
| < OR : "OU">
| < AND : "ET">
| < NOT : "NON">
| < FUNCTION : "FONCTION">
| < EFUNCTION  : "FFONCTION">
| < PROGRAM : "PROGRAMME" >
| < EPROGRAM: "FPROGRAMME" >
| < MAIN : "PRINCIPAL">
| < EMAIN : "FPRINCIPAL">
| < THEN : "ALORS">
| < WRITE : "ECRIRE">
| < READ : "LIRE">
| < GOTOLINE : "ALALIGNE">
| < PLUS : "+">
| < MINUS : "-">
| < DIV : "/">
| < MUL : "*">
| < EQU : "=">
| < DIF : "<>">
| < INF : "<">
| < EINF : "<=">
| < SUP : ">">
| < ESUP : ">=">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #figure : ["0"-"9"] >
| < integer : (<figure>)+ > 
	{ intRead = Integer.parseInt(image.toString());
        }
| < #letter: ["A"-"Z","a"-"z"] >
| < ident : <letter> (<letter> | <figure>)* >
	{identRead =image.toString();	
	}
| < string : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ stringRead = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAM> <ident>
   {yvm.entete();}	
   bloc()
   <EPROGRAM>
   {yvm.queue();}	 
}

void bloc() : {}{
 (declConst())*
 (declVar())*
 {declaration.setStack();}		
 listInstr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident>  {declaration.setNextIdent(YakaTokenManager.identRead);}	  	
   "=" valConst()
    
}

void valConst() : {}{
  <integer> {declaration.putConst(YakaTokenManager.intRead);}	
 | <ident>	{declaration.putConst(YakaTokenManager.identRead);}
 | <TRUE> 	{declaration.putConst(true);}
 | <FALSE>  {declaration.putConst(false);}
}


void declVar() : {}
{
  <VAR> type()	
  <ident> {declaration.setVar(YakaTokenManager.identRead);}		
  ("," 
      <ident> {declaration.setVar(YakaTokenManager.identRead);}
  )* ";"
	
}

void type() :{}
{
   <INT> {declaration.setNextType(Type.INTEGER);}	
 | <BOOLEAN> {declaration.setNextType(Type.BOOLEAN);}
}
/*
 * Syntaxe des instructions.
 */
void listInstr() : {}
{
	instruction() (";" (instruction() | {}) ) *
}

void instruction() : {}
{
	affectation() | reading() | writing() | loop() | condition()
}

void affectation() : {}
{
	<ident> {declaration.setNextIdent(YakaTokenManager.identRead);}
	"="
	expression() {declaration.putVar();}
}

void reading() : {}
{
	<READ>"(" <ident> {expression.read(YakaTokenManager.identRead);}")"
}

void writing() : {}
{
	(<WRITE>"("((<string> {yvm.writeStr(YakaTokenManager.stringRead);})
	|(expression() {expression.writeVal();}))")")
	|(<GOTOLINE> {yvm.backToLine();})
}

void loop() : {}
{
	<WHILE>			{loop.setWhile();}
	expression()	{loop.iffalse();}
	<DO>
	listInstr()		{loop.goTo();}
	<DONE>			{loop.setDone();}
}

void condition() : {}
{
	<IF>			{condition.setIf();}
	expression()	{condition.iffalse();}
	<THEN>
	listInstr()		{condition.then();condition.setElse();}
	(<ELSE>
	listInstr())?
	<FI>			{condition.setFi();}
}

/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr()
  {expression.operation();}
  )?
}



void simpleExpr() : {}
{
   term() 
   (opAdd() 
   term()
   {expression.operation();}
   )*
} 
void term() : {}
{
  factor() 
  (opMul() 
  factor()
  {expression.operation();}	
  )*
}
void factor() : {}
{   primary() 
    |opNeg() primary()
    {expression.operation();}
}

void primary (): {}
{
   value()
 | "(" expression() ")" 
 
}

void value () : {}
{ <integer> {expression.pushOperand(YakaTokenManager.intRead);}		
 | <ident> 	{expression.pushOperand(YakaTokenManager.identRead);}
 | <TRUE> 	{expression.pushOperand(true);}
 | <FALSE> 	{expression.pushOperand(false);}	
 
}

void opRel() : {}
{
   <EQU> 	{expression.pushOperator(Constant.EQU);}	
 | <DIF>	{expression.pushOperator(Constant.DIF);}	
 | <INF> 	{expression.pushOperator(Constant.INF);}	
 | <EINF> 	{expression.pushOperator(Constant.EINF);}	
 | <SUP> 	{expression.pushOperator(Constant.SUP);}	
 | <ESUP> 	{expression.pushOperator(Constant.ESUP);}	
} 

void opAdd() : {}
{
    <PLUS>	 {expression.pushOperator(Constant.PLUS);}	
  | <MINUS>  {expression.pushOperator(Constant.MINUS);} 
  | <OR>  	 {expression.pushOperator(Constant.OR);}
}

void opMul() : {}
{
    <MUL>    {expression.pushOperator(Constant.MUL);}		
  | <DIV>	 {expression.pushOperator(Constant.DIV);}	
  | <AND>	 {expression.pushOperator(Constant.AND);}
} 

void opNeg() : {}
{  <MINUS>   {expression.pushOperator(Constant.NEG);}		
 | <NOT>	 {expression.pushOperator(Constant.NOT);}
}


